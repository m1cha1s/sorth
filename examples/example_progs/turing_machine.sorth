-1 silent

(
    ## Action codes:
    - 0 -> P0
    - 1 -> P1
    - 2 -> R
    - 3 -> L
    - 4 -> P0,R
    - 5 -> P0,L
    - 6 -> P1,R
    - 7 -> P1,L

    ## Table structure
    ------------------------------------------------------
    | |state            |This is a cell index            |
    ------------------------------------------------------
    |0|if condition     |This is either -1/0             | 
    ------------------------------------------------------
    |1|condition        |Either 1/0                      |
    ------------------------------------------------------
    |2|action           |An action code                  |
    ------------------------------------------------------
    |3|next state true  |State index if condition met    |
    ------------------------------------------------------
    |4|next state false |State index if condition failed |
    ------------------------------------------------------
)

( ---- Definitions ---- )

let tape
let states ( this holds the adresses to the other states that are stored as variables )
let current_state ( 0: current state index, 1: current tape index )

let state_0
let state_1

: print_tape
    @tape len 0 for 
        @tape i get .
    next
;

: tape_setup
    0 for 
        @tape 0 push 
    next
;

: get_current_state @states @current_state 0 get get ;

: get_current_tape_location     @current_state 1 get ;
: set_current_tape_location     @current_state 1 rot set ;

: get_current_tape_cell @tape @current_state 1 get get ;
: set_current_tape_cell @tape @current_state 1 get rot set ;

: execute_action
    ( P0 )   dup 0 == if 0 set_current_tape_cell then
    ( P1 )   dup 1 == if 1 set_current_tape_cell then
    ( R )    dup 2 == if get_current_tape_location 1 + set_current_tape_location then
    ( L )    dup 3 == if get_current_tape_location 1 - set_current_tape_location then
    ( P0,R ) dup 4 == if 0 set_current_tape_cell get_current_tape_location 1 + set_current_tape_location then
    ( P0,L ) dup 5 == if 0 set_current_tape_cell get_current_tape_location 1 - set_current_tape_location then
    ( P1,R ) dup 6 == if 1 set_current_tape_cell get_current_tape_location 1 + set_current_tape_location then
    ( P1,L )     7 == if 1 set_current_tape_cell get_current_tape_location 1 - set_current_tape_location then
;

: cycle_turing_machine
    get_current_state    
    ( Check if there is a condition )
    dup 0 get if
        dup 1 get if 
            dup 2 get execute_action
            3 get @current_state 0 rot set
        else
            4 get @current_state 0 rot set
        then
    else
        dup 2 get execute_action
        3 get @current_state 0 rot set
    then
;

: run_turing_machine

    while @current_state 1 get @tape len > @current_state 1 get -1 < and
    do
        cycle_turing_machine
        " Tape: " . print_tape nl
        " Current cell: " . @current_state 1 get . nl
    again

;

: state_setup 
    @current_state 0 push
    @current_state 0 push

    @states @state_0 push
    @states @state_1 push

    @state_0
    dup 0 push
    dup 2 push
    dup 4 push
    dup 1 push
    0 push

    @state_1
    dup 0 push
    dup 2 push
    dup 6 push
    dup 0 push
    1 push
;

: main

    ( ---- Setting up states ---- )

    state_setup

    ( ---- Tape setup ---- )
    10 tape_setup

    ( ---- Running turing machine ---- )

    " ---------------------------------- " dup . nl
    " Turing machine example in sorth :) " . nl
    . nl

    run_turing_machine

;

main
0 silent